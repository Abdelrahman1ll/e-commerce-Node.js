services:
  e-commerce:
    build:
      context: .
      target: ${NODE_ENV:-production}
    volumes:
      - ./src:/app/src:ro
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    env_file:
      - ./.env
    deploy:
      replicas: ${APP_REPLICAS:-5}
      # resources:
        # limits:
        #   cpus: "0.50"
        #   memory: 256M
        # reservations:
        #   cpus: "0.25"
        #   memory: 128M
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
    command: >
      sh -c "
      if [ \"${NODE_ENV}\" = 'production' ]; then
        npm start;
      else
        npm run dev;
      fi
      "
    depends_on:
      - redis
      - mongo

  mongo:
    container_name: e-commerce-mongo
    image: mongo:latest
    volumes:
      - mongo-db:/data/db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    command:
      ["mongod", "--quiet", "--bind_ip_all", "--logpath", "/data/db/mongod.log"]

  mongo-express:
    image: mongo-express:latest
    volumes:
      - mongo-express-data:/var/lib/mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: 1234
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - mongo
    command: >
      sh -c "
      if [ \"${NODE_ENV}\" = 'production' ]; then
        echo 'mongo-express disabled in production' && tail -f /dev/null;
      else
        tini -- /docker-entrypoint.sh mongo-express;
      fi
      "

  redis:
    image: redis:latest
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # - ./certs:/etc/nginx/certs:ro
    depends_on:
      - e-commerce

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
    entrypoint: sh -c "trap exit TERM; while :; do certbot renew; sleep 12h; done"
    command: >
      sh -c "certbot certonly --webroot -w /var/www/certbot
             -d abdelrahma.com
             --email abdomohamed2200066@gmail.com
             --agree-tos
             --no-eff-email
             && crond -f"
    depends_on:
      - nginx

  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   depends_on:
  #     - e-commerce

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - "3001:3000"
  #   depends_on:
  #     - prometheus

volumes:
  mongo-db:
  mongo-express-data:
  redis-data:
